HTML

<!DOCTYPE html>
<html lang="pt-BR">

<head>
  <meta charset="UTF-8" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/css2?family=Shantell+Sans:wght@400;500;600;700&display=swap"
    rel="stylesheet">
  <title>Pokedex</title>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>


 React



 {
  "name": "pokedex",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@phosphor-icons/react": "^2.0.10",
    "axios": "^1.3.4",
    "phosphor-react": "^1.4.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.27",
    "@types/react-dom": "^18.0.10",
    "@vitejs/plugin-react": "^3.1.0",
    "vite": "^4.1.0"
  }
}


css

*{
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body{
  background-color: #222;
  font-family: 'Shantell Sans', cursive;
  max-width: 1200px;
  margin: 0 auto;
}

.container h1 {
  color: aliceblue;
  text-align: center;
  padding-top: 15px;
  margin-bottom: 15px;
  font-size: 50px;
}

.busca-container{
  margin-block: 2.5rem;
  padding: .625rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.busca{
  border: none;
  outline: none;
  background-color:transparent;
  box-shadow: 10px 20px 40px rgba(255, 255, 255, 0.1);;
  padding-inline: 1.87rem;
  border-radius: .625rem;
  width: 0%;
  color:#615e5e;
  font-size: 1.25rem;
  line-height: 2.5rem;
  transition: 1s;
}

.busca-container svg{
  color: white;
}

.busca:hover{
  background-color: white;
  width: 30%;
}

.pokemons {
  display: grid;
  grid-template-columns: repeat(auto-fit , minmax(300px,auto));
  justify-content: center;
  gap: 20px;
  padding-bottom: 10px;
}

.card{
  max-width: 300px;
  padding: 20px;
  color: #222;
  text-align: center;
  border-radius: 20px;
  background-color: white;
  overflow: hidden;
}

.card-image{
  max-width: 150px;
}

.type{
  color:#615e5e;
  padding-top: 5px;
  position: relative;
  top: 45px;
  transition: top 1s;
  font-size: 1.25rem;
}

.card:hover .type{
  cursor: pointer;
  top: 0;
}


.fire{
  background-color: rgb(255,78,9); 
}
.grass {
  background-color: aquamarine;
}

.water {
  background-color: transparent;
  backdrop-filter: blur(90px);
  backdrop-filter: brightness(95%);
  border: 2px solid rgba(255, 255, 255, 0.10);
}

.water .type{
  color: white;
}

.card.water{
  color: white;
}

.bug {
  background-color: #f8d5a3;
}

.normal {
  background-color: white;
}

.electric {
  background-color: #f2eac6;
}

.ground {
  background-color: #eeab9d;
}

.poison {
  background-color: #b1e9bc;
}

.fairy {
  background-color: #f1ddf5;
}


jsx.css



import { useEffect, useState } from "react";
import {MagnifyingGlass} from "@phosphor-icons/react"
import axios from "axios";
import "./App.css";

function App() {
  const [pokemons, setPokemons] = useState({});
  const [busca, setBusca]= useState('')

  const getPokemons = async (id) => {

  try {
    const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`)
      setPokemons((prevPokemons) => ({ ...prevPokemons, [id]: response.data }));
  } catch (error) {
    console.log(error)
  }
  };

  const arrayPokemons = () =>
    Array(150)
      .fill()
      .map((_, index) => getPokemons(index + 1));

  const buscarPokemons = Object.values(pokemons).filter(
    (pokemon) => pokemon.name.toLocaleLowerCase().includes(busca.toLocaleLowerCase()) ||
    pokemon.id === parseInt(busca)
  )

  

  useEffect(() => {
    arrayPokemons();
  }, []);


  return (
    <div className="container">
      <h1>Pokedex</h1>

      <div className="busca-container">
      <MagnifyingGlass size={40} />
        <input 
        className="busca"
        type="search"
        placeholder="pesquisar pokemons"
        value={busca}
        onChange={({target})=> setBusca(target.value)}

        />

      </div>

      <ul className="pokemons">
        {buscarPokemons.map(({ id, name, types }) => (
          <li className={`card ${types[0].type.name}`}>
            <img
              className="card-image"
              src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`}
              alt={name}
            />
            <h2>
              {id}. {name}
            </h2>
            <p className="type">{types.map((item) => item.type.name).join(" || ")}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default App;

